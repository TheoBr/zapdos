import type { GetServerSidePropsContext, NextPage } from "next";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";
import { getZapdosAuthSession } from "../server/common/get-server-session";

import { FaCopy, FaLock, FaLockOpen, FaSignOutAlt, FaTwitch } from "react-icons/fa";
import dynamic from "next/dynamic";
import { trpc } from "../utils/trpc";

const LazyQuestionsView = dynamic(() => import("../components/my-questions"), {
  ssr: false,
});

const copyUrlToClipboard = (path: string) => () => {
  if (!process.browser) return;
  navigator.clipboard.writeText(`${window.location.origin}${path}`);
};

const SwitchLoginRequiredButton: React.FC<{ userId: string }> = ({ userId }) => {
  const { data, refetch } = trpc.proxy.settings.getLoginRequired.useQuery({ userId });
  const { mutateAsync } = trpc.proxy.settings.setRequiresLogin.useMutation();

  const loginRequired = !!data; // defaults to null

  return (
    <button
      onClick={() => {
        mutateAsync({ loginRequired: !loginRequired }).finally(() => refetch());
      }}
      className="flex gap-2 rounded bg-gray-200 p-4 font-bold text-gray-800 hover:bg-gray-100"
    >
      Switch to {" "}
      {
        loginRequired && <>
          open questions <FaLockOpen size={24} />
        </>
      }
      {
        !loginRequired && <>
          login required <FaLock size={24} />
        </>
      }
    </button>
  )
}

const NavButtons: React.FC<{ userId: string }> = ({ userId }) => {
  const { data: sesh } = useSession();

  return (
    <div className="flex gap-2">
      <SwitchLoginRequiredButton userId={userId} />

      <button
        onClick={copyUrlToClipboard(`/embed/${userId}`)}
        className="flex gap-2 rounded bg-gray-200 p-4 font-bold text-gray-800 hover:bg-gray-100"
      >
        Copy embed url <FaCopy size={24} />
      </button>
      <button
        onClick={copyUrlToClipboard(`/ask/${sesh?.user?.name?.toLowerCase()}`)}
        className="flex gap-2 rounded bg-gray-200 p-4 font-bold text-gray-800 hover:bg-gray-100"
      >
        Copy Q&A url <FaCopy size={24} />
      </button>
      <button
        onClick={() => signOut()}
        className="flex gap-2 rounded bg-gray-200 p-4 font-bold text-gray-800 hover:bg-gray-100"
      >
        Logout <FaSignOutAlt size={24} />
      </button>
    </div>
  );
};

const HomeContents = () => {
  const { data } = useSession();

  if (!data)
    return (
      <div className="flex grow flex-col items-center justify-center">
        <div className="text-2xl font-bold">Please log in below</div>
        <div className="p-4" />
        <button
          onClick={() => signIn("twitch")}
          className="flex items-center gap-2 rounded bg-gray-200 px-4 py-2 text-2xl text-black"
        >
          <span>Sign in with Twitch</span>
          <FaTwitch />
        </button>
      </div>
    );

  return (
    <div className="flex flex-col">
      <div className="flex w-full items-center justify-between bg-gray-800 py-4 px-8 shadow">
        <h1 className="flex items-center gap-2 text-2xl font-bold">
          {data.user?.image && (
            <img
              src={data.user?.image}
              alt="pro pic"
              className="w-16 rounded-full"
            />
          )}
          {data.user?.name}
        </h1>
        <NavButtons userId={data.user?.id!} />
      </div>
      <LazyQuestionsView />
    </div>
  );
};

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>{"Stream Q&A Tool"}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="relative flex h-screen w-screen flex-col justify-between">
        <HomeContents />
        <div className="flex w-full justify-between bg-black/40 py-4 px-8">
          <span>
            Quickly created by{" "}
            <a href="https://twitter.com/t3dotgg" className="text-blue-300">
              Theo
            </a>
          </span>
          <div className="flex gap-4">
            <a
              href="https://github.com/theobr/zapdos"
              className="text-blue-300"
            >
              Github
            </a>
            <a href="https://t3.gg/discord" className="text-blue-300">
              Discord
            </a>
          </div>
        </div>
      </div>
    </>
  );
};

export const getServerSideProps = async (ctx: GetServerSidePropsContext) => {
  return {
    props: {
      session: await getZapdosAuthSession(ctx),
    },
  };
};

export default Home;
